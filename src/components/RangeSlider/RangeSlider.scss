$stacking-order: (
  output: 10,
  input: 20,
);

$range-track-height: rem(4px);
$range-thumb-size: rem(24px);
$range-thumb-border-size: rem(2px);
$range-thumb-shadow: (0 0 0 rem(1px) rgba(black, 0.2), shadow(faint));
$range-thumb-shadow-hover: (0 0 0 rem(1px) rgba(black, 0.4), shadow(faint));
$range-thumb-shadow-error: 0 0 0 rem(1px) color('red');
$range-thumb-shadow-focus: 0 0 0 rem(1px) color('indigo');
$range-dual-thumbs-offsetTop: rem(10px); // half thumb size - borders
$range-upper-thumb-offsetLeft: rem(48px); // twice thumb size
$range-dual-thumbs-border: rem(1px) solid color('ink', 'lighter');
$range-dual-thumbs-border-hover: rem(1px) solid color('sky', 'light');
$range-dual-thumbs-border-error: rem(1px) solid color('sky', 'light');
$range-dual-thumbs-border-focus: rem(1px) solid color('sky', 'light');

.RangeSlider {
  position: relative;
  display: flex;
  align-items: center;

  &:not(:first-child) {
    margin-top: spacing(tight);
  }

  &.disabled {
    opacity: 0.8;
  }
}

.InputWrapper {
  position: relative;
  display: flex;
  align-items: center;
  flex: 1 1 auto;
  height: $range-thumb-size;
}

.Prefix {
  flex: 0 0 auto;
  margin-right: spacing(tight);
}

.Suffix {
  flex: 0 0 auto;
  margin-left: spacing(tight);
}

.Input {
  --progress-lower: #{color('indigo')};
  --progress-upper: #{color('sky', 'dark')};
  --gradient-colors: var(--progress-lower, transparent) 0%,
    var(--progress-lower, transparent) var(--Polaris-RangeSlider-progress, 0%),
    var(--progress-upper, transparent) var(--Polaris-RangeSlider-progress, 100%),
    var(--progress-upper, transparent) 100%;

  &::-ms-tooltip {
    display: none;
  }

  @include unstyled-input;
  position: relative;
  z-index: z-index('input', $stacking-order);
  flex: 1 1 auto;

  @include range-track-selectors {
    cursor: pointer;
    width: 100%;
    height: $range-track-height;
    background-color: var(--progress-upper, color('sky', 'dark'));
    background-image: linear-gradient(to right, var(--gradient-colors));
    border: none;
    border-radius: $range-track-height;
  }

  @include range-thumb-selectors {
    // stylelint-disable-next-line value-no-vendor-prefix
    cursor: -webkit-grab;
    width: $range-thumb-size;
    height: $range-thumb-size;
    border: border-width() solid color('sky', 'lighter');
    border-radius: 50%;
    background: linear-gradient(color('white'), color('sky', 'lighter'));
    box-shadow: $range-thumb-shadow;
    appearance: none;
    transition-property: border-color, box-shadow;
    transition-duration: duration();
    transition-timing-function: easing();

    &:hover {
      background: linear-gradient(
        color('sky', 'lighter'),
        color('sky', 'light')
      );
      box-shadow: $range-thumb-shadow-hover;
    }
  }

  &::-ms-thumb {
    margin-top: 0;
    transform: translateY($range-thumb-size / 5) scale(0.4);
  }

  &::-webkit-slider-thumb {
    margin-top: -($range-thumb-size - $range-track-height) / 2;
  }

  .error & {
    --progress-lower: #{color('red')};

    @include range-track-selectors {
      background-color: color('red', 'light');
    }

    @include range-thumb-selectors {
      border-color: color('red');
      box-shadow: $range-thumb-shadow-error;
    }
  }

  .disabled & {
    @include range-track-selectors {
      cursor: auto;
      background-image: none;
    }

    @include range-thumb-selectors {
      cursor: not-allowed;
      border-color: color('sky', 'dark');
    }
  }

  // match `error` specificity for interaction styles
  .RangeSlider &:focus {
    // repeated so that `focus` can override `error`
    --progress-lower: #{color('indigo')};

    @include range-track-selectors {
      background-color: color('sky', 'dark');
    }

    @include range-thumb-selectors {
      background: linear-gradient(
        color('sky', 'lighter'),
        color('sky', 'light')
      );
      border-color: color('indigo');
      box-shadow: $range-thumb-shadow-focus;
    }
  }
}

.DualInputRail {
  --unselected-range: #{color('ink', 'lighter')};
  --selected-range: #{color('indigo')};
  --gradient-colors-dual: var(--unselected-range, transparent) 0%,
    var(--unselected-range, transparent)
      var(--Polaris-RangeSlider-unselected-lower),
    var(--selected-range, transparent) var(--Polaris-RangeSlider-selected-lower),
    var(--selected-range, transparent) var(--Polaris-RangeSlider-selected-upper),
    var(--unselected-range, transparent)
      var(--Polaris-RangeSlider-unselected-upper),
    var(--unselected-range, transparent) 100%;
  position: relative;
  width: 100%;
  height: $range-track-height;
  border-radius: $range-thumb-size;
  display: flex;
  flex-wrap: nowrap;
  cursor: pointer;
  background-image: linear-gradient(to right, var(--gradient-colors-dual));
}

.DualInputThumbs {
  position: relative;
  top: -($range-dual-thumbs-offsetTop);
  width: $range-thumb-size;
  height: $range-thumb-size;
  border-radius: 50%;
  border: $range-dual-thumbs-border;
  background: linear-gradient(color('sky', 'lighter'), color('sky', 'light'));

  // &:focus {
  //   // repeated so that `focus` can override `error`
  //   --progress-lower: #{color('indigo')};

  //   @include range-track-selectors {
  //     background-color: color('sky', 'dark');
  //   }

  //   @include range-thumb-selectors {
  //     background: linear-gradient(
  //       color('sky', 'lighter'),
  //       color('sky', 'light')
  //     );
  //     border-color: color('indigo');
  //     box-shadow: $range-thumb-shadow-focus;
  //   }
  // }
}

.DualInputLowerThumb {
  left: var(--Polaris-RangeSlider-selected-lower);
}

.DualInputUpperThumb {
  left: var(--Polaris-RangeSlider-selected-upper);
  margin-left: -($range-upper-thumb-offsetLeft);
  // left: calc(
  //   var(--Polaris-RangeSlider-selected-upper) - $range-upper-thumb-offsetLeft
  // );
}

///
/// Output value indicator
$range-output-size: rem(32px);
$range-output-tip-size: rem(8px);
$range-output-translate-x: calc(
  -50% + var(--Polaris-RangeSlider-output-factor, 0) * #{$range-thumb-size}
);
$range-dual-lower-output-translate-x: calc(
  -50% + var(--Polaris-RangeSlider-output-factor-lower, 0) * #{$range-thumb-size}
);
$range-dual-upper-output-translate-x: calc(
  -50% + var(--Polaris-RangeSlider-output-factor-upper, 0) * #{$range-thumb-size}
);

.Output {
  position: absolute;
  z-index: z-index('output', $stacking-order);
  bottom: $range-output-size - $range-output-tip-size;
  opacity: 0;
  visibility: hidden;
  pointer-events: none;
  transition-property: opacity, visibility;
  transition-duration: duration();
  transition-timing-function: easing();

  .Input:hover + &,
  .Input:active + &,
  .Input:focus + & {
    opacity: 1;
    visibility: visible;
  }

  .DualInputLowerThumb:hover + &,
  .DualInputLowerThumb:active + &,
  .DualInputLowerThumb:focus + & {
    opacity: 1;
    visibility: visible;
  }

  .DualInputUpperThumb:hover + &,
  .DualInputUpperThumb:active + &,
  .DualInputUpperThumb:focus + & {
    opacity: 1;
    visibility: visible;
  }
}

.SingleOutput {
  left: var(--Polaris-RangeSlider-progress, 50%);
  transform: translateX($range-output-translate-x);
}

.OutputBubble {
  position: relative;
  display: flex;
  padding: 0 spacing(tight);
  min-width: $range-output-size;
  height: $range-output-size;
  background-color: color('ink');
  border-radius: border-radius();
  transition-property: transform;
  transition-duration: duration();
  transition-timing-function: easing();

  &::before {
    content: '';
    position: absolute;
    bottom: -($range-output-tip-size - rem(1px));
    left: 50%;
    margin-left: -$range-output-tip-size;
    display: block;
    width: 0;
    height: 0;
    border-left: $range-output-tip-size solid transparent;
    border-right: $range-output-tip-size solid transparent;
    border-top: $range-output-tip-size solid color('ink');
  }

  // stylelint-disable selector-max-specificity
  .Input:hover + .Output &,
  .Input:active + .Output &,
  .Input:focus + .Output & {
    transform: translateY(-$range-thumb-size);

    @include page-content-when-not-partially-condensed {
      transform: translateY(-($range-thumb-size / 2));
    }
  }

  .DualInputThumbs:hover + .Output &,
  .DualInputThumbs:active + .Output &,
  .DualInputThumbs:focus + .Output & {
    transform: translateY(-$range-thumb-size);

    @include page-content-when-not-partially-condensed {
      transform: translateY(-($range-thumb-size / 2));
    }
  }
  // stylelint-enable selector-max-specificity
}

.OutputText {
  @include text-style-subheading;
  display: block;
  flex: 1 1 auto;
  margin: auto;
  text-align: center;
  color: color('white');
}

.DualInputLowerOutput {
  left: var(--Polaris-RangeSlider-selected-lower, 50%);
  transform: translateX($range-dual-lower-output-translate-x);
}

.DualInputUpperOutput {
  left: var(--Polaris-RangeSlider-selected-upper, 50%);
  transform: translateX($range-dual-upper-output-translate-x);
}
